@page "/MisReservas"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.BarcodeGenerator
@using Models.Reservas
@using Contracts.Reservas
@using AlDente.Globalization

@attribute [Authorize]

@inject IReservaService _reservaService
@inject IToastService Toast
<MyCard Header="Mis Reservas">
    @if (this.ViewModel == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <SfGrid DataSource="@ViewModel.Reservas" AllowPaging="true" AllowGrouping="true" AllowSorting="true">
                        <GridGroupSettings Columns="@GroupedColumns" ShowDropArea="false" ShowUngroupButton="false"></GridGroupSettings>
                        <GridSortSettings>
                            <GridSortColumns>
                                <GridSortColumn Field="@nameof(ReservaBasicDTO.EstadoName)" Direction="SortDirection.Descending"></GridSortColumn>
                            </GridSortColumns>
                        </GridSortSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(ReservaBasicDTO.Fecha) Format="dd/MM/yyyy" HeaderText="@Messages.Date"></GridColumn>
                            <GridColumn Field=@nameof(ReservaBasicDTO.Turno) HeaderText="@Messages.Turno"></GridColumn>
                            <GridColumn Field=@nameof(ReservaBasicDTO.Codigo) HeaderText="@Messages.Code"></GridColumn>
                            <GridColumn Field=@nameof(ReservaBasicDTO.Comensales) HeaderText="@Messages.Comensales"></GridColumn>
                            <GridColumn Field=@nameof(ReservaBasicDTO.EstadoName) HeaderText="@Messages.State">

                            </GridColumn>
                            <GridColumn HeaderText="@Strings.Actions">
                                <GridCommandColumns>
                                    <GridCommandColumn Title="QR" ButtonOption="@(new CommandButtonOptions() { IconCss = "fa fa-qrcode", CssClass = "e-info" })"></GridCommandColumn>
                                    <GridCommandColumn Title="Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel", CssClass = "e-danger" })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                        <GridEvents CommandClicked="OnCommandClicked" RowDataBound="RowBound" TValue="ReservaBasicDTO">

                        </GridEvents>
                    </SfGrid>
                </div>
            </div>
        </div>
        <SfDialog AllowDragging="true" @bind-Visible="@dialogVisible" IsModal="true" Width="285px" ShowCloseIcon="true">
            <DialogTemplates>
                <Header>Desea Cancelar la reserva?</Header>
                <Content>
                    @if (reservaACancelarDTO != null)
                    {
                        <EditForm Model="@reservaACancelarDTO" OnValidSubmit="@CancelarReserva">
                            <FluentValidationValidator @ref="fluentValidationValidator" DisableAssemblyScanning="@true" />
                            <div class="form-row">
                                <div class="form-group col-md">
                                    <DisplayName For="@(() => reservaACancelarDTO.Motivo)" InputFor="@nameof(reservaACancelarDTO.Motivo)" />
                                    <SfTextBox TValue="string" @bind-Value="reservaACancelarDTO.Motivo" ID="@nameof(reservaACancelarDTO.Motivo)"></SfTextBox>
                                    <ValidationMessage For="@(() => reservaACancelarDTO.Motivo)" />
                                </div>
                            </div>
                            <div class="e-footer-content">
                                <ButtonProgressBasic loading="loading" CssClass="e-primary" type="submit">Confirmar</ButtonProgressBasic>
                            </div>
                        </EditForm>
                    }

                </Content>
            </DialogTemplates>
            <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
        </SfDialog>
        <SfDialog AllowDragging="true" @bind-Visible="@showQR" IsModal="true" Width="500px" ShowCloseIcon="true">
            <DialogTemplates>
                <Content>
                    <div class="text-center">
                        <SfQRCodeGenerator Width="500px" Height="500px" Value="@codigoReserva">
                            <QRCodeGeneratorDisplayText Visibility="true"></QRCodeGeneratorDisplayText>
                        </SfQRCodeGenerator>
                    </div>
                </Content>
            </DialogTemplates>
            <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
        </SfDialog>
    }
</MyCard>
<style>
    .e-removecommand .e-unboundcell .e-unboundcelldiv button {
        display: none;
    }
</style>
@code {

    public string[] GroupedColumns = new string[] { nameof(ReservaBasicDTO.EstadoName) };
    private bool loading;
    bool dialogVisible { get; set; } = false;
    bool showQR { get; set; } = false;
    string codigoReserva { get; set; } = "";
    private FluentValidationValidator fluentValidationValidator;
    private MisReservasViewModel ViewModel { get; set; }


    private ReservaACancelarDTO reservaACancelarDTO => this.ViewModel.ReservaACancelar;

    protected async override Task OnInitializedAsync()
    {
        this.ViewModel = await MisReservasViewModel.Create(_reservaService);
        await base.OnInitializedAsync();
    }
    public void RowBound(RowDataBoundEventArgs<ReservaBasicDTO> args)
    {
        if (!args.Data.ShowCancelButton)
        {
            args.Row.AddClass(new string[] { "e-removecommand" });
        }
    }

    public void OnCommandClicked(CommandClickEventArgs<ReservaBasicDTO> args)
    {
        if (args.CommandColumn.Title == "QR")
        {
            this.codigoReserva = args.RowData.Codigo;
            this.showQR = true;
        }
        else if (args.CommandColumn.Title == "Cancel")
        {
            this.ViewModel.SetReservaACancelar(args.RowData);
            this.dialogVisible = true;
        }
    }
    private async Task CancelarReserva()
    {
        loading = true;
        var result = await this.ViewModel.CancelarReserva();
        if (result.IsValid)
        {
            Toast.ShowMessage(MessageType.Success, result.MessageSuccsefully);
            this.dialogVisible = false;
            await OnInitializedAsync();
        }
        else
        {
            Toast.ShowMessage(MessageType.Error, result.AllErrors);
        }
        loading = false;
    }

    private void OcultarDialog(Object e)
    {
        this.dialogVisible = false;
    }



}
