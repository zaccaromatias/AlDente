@page "/AplicarBeneficio"
@attribute [Authorize]
@using Syncfusion.Blazor.Grids
@using AlDente.Contracts.Beneficios
@using AlDente.Globalization
@using AlDente.Contracts.Reservas
@using Syncfusion.Blazor.DropDowns
@using Models.Beneficios

@inject IPoliticaBeneficioService servPoliticaBeneficio
@inject ITipoBeneficioService servTipoBeneficio
@inject IBeneficioService servBeneficio
@inject IToastService Toast

<MyCard Header="Aplicar beneficio">
    @*if (this.Beneficio == null)
    {
    <p><em>Loading...</em></p>
    }
    else
    {*@
    <div class="form-inline">
        <label class="sr-only" for="filter-name">Filtro</label>
        <input type="text" class="form-control mb-2 mr-sm-2"
               @bind="ViewModel.Beneficio.Id"
               placeholder="Código de reserva" />
        <button type="button" class="btn btn-primary mr-sm-2 mb-2"
                @onclick="Buscar">
            Buscar
        </button>
        <button type="button" class="btn btn-danger mb-2"
                @onclick="Borrar">
            Borrar
        </button>
    </div>
    }




    @*
                <EditForm Model="@Reserva" OnValidSubmit="@OnSubmint">
                    <FluentValidationValidator @ref="fluentValidationValidator" DisableAssemblyScanning="@true" />
                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <DisplayName For="@(() => Reserva.Cliente)" InputFor="@nameof(Reserva.Cliente)" />
                            <SfDropDownList TItem="ClienteDTO" TValue="ClienteDTO" Placeholder="[Seleccione Un Cliente]" @bind-Value="@Reserva.Cliente" DataSource="@Reserva.Clientes" ID="@nameof(Reserva.Cliente)" @ref="@ComboCliente">
                                <DropDownListEvents TItem="ClienteDTO" TValue="ClienteDTO"></DropDownListEvents>
                                <DropDownListFieldSettings Text="@nameof(ClienteDTO.Email)"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => Reserva.Cliente)" />
                        </div>

                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <DisplayName For="@(() => Reserva.Comensales)" InputFor="@nameof(Reserva.Comensales)" />
                            <SfNumericTextBox TValue="int?" @bind-Value="Reserva.Comensales" Min="2" Max="8" ID="@nameof(Reserva.Comensales)" OnChange="@Clear"></SfNumericTextBox>
                            <ValidationMessage For="@(() => Reserva.Comensales)" />
                        </div>
                        <div class="form-group col-md-3">
                            <DisplayName For="@(() => Reserva.Fecha)" InputFor="@nameof(Reserva.Fecha)" />
                            <SfDatePicker TValue="DateTime?" Placeholder="Choose a Date" @bind-Value="Reserva.Fecha" ID="@nameof(Reserva.Fecha)" @ref="@DatePickerObj" AllowEdit="false">
                                <DatePickerEvents TValue="DateTime?" ValueChange="@DateHasChanged" OnRenderDayCell="@EsDiaLaborable" />
                            </SfDatePicker>
                            <ValidationMessage For="@(() => Reserva.Fecha)" />
                        </div>
                        <div class="form-group col-md-3">
                            <DisplayName For="@(() => Reserva.Turno)" InputFor="@nameof(Reserva.Turno)" />
                            <SfDropDownList TItem="TurnoDTO" TValue="TurnoDTO" Placeholder="[Seleccione Un Turno]" @bind-Value="@Reserva.Turno" DataSource="@Reserva.Turnos" ID="@nameof(Reserva.Turno)" @ref="@ComboTurno">
                                <DropDownListEvents TItem="TurnoDTO" TValue="TurnoDTO" OnValueSelect="TurnoHasChanged"></DropDownListEvents>
                                <DropDownListFieldSettings Text="@nameof(TurnoDTO.Text)"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => Reserva.Turno)" />
                        </div>

                        <div class="col-md-3 align-self-center text-center">
                            <ButtonProgress CssClass="e-info" OnClick="@BuscarCombinaciones">[Buscar]</ButtonProgress>
                        </div>
                    </div>
        if (!string.IsNullOrEmpty(Reserva.MensajeDeErrorAlBuscar))
        {
            <div class="form-group">
                <div class="alert alert-danger mt-3 mb-0">@Reserva.MensajeDeErrorAlBuscar</div>
            </div>
        }
        @if (!string.IsNullOrEmpty(Reserva.MensajeDeErrorClientes))
        {
            <div class="form-group">
                <div class="alert alert-danger mt-3 mb-0">@Reserva.MensajeDeErrorClientes</div>
            </div>
        }*@
    @*@if (Reserva.Combinaciones.Any())
        {
            <div class="form-group">
                <SfListBox CssClass="e-template-listbox" TValue="Guid?[]" DataSource="@Reserva.Combinaciones" TItem="CombinacionDTO" @bind-Value="@Reserva.Combinacion">
                    <ListBoxFieldSettings Text="Description" Value="Key"></ListBoxFieldSettings>
                    <ListBoxTemplates TItem="CombinacionDTO">
                        <ItemTemplate Context="combinacion">
                            <div class="list-wrapper">
                                <span class="description">@(combinacion.Description)</span>
                            </div>
                        </ItemTemplate>
                    </ListBoxTemplates>
                </SfListBox>

            </div>
        }

        @if (!string.IsNullOrEmpty(Reserva.MensajeDeErrorAlReservar))
        {
            <div class="form-group">
                <div class="alert alert-danger mt-3 mb-0">@((MarkupString)Reserva.MensajeDeErrorAlReservar)</div>
            </div>
        }

        @if (Reserva.EsValidoParaReservar)
        {
            <ButtonProgress CssClass="e-success" OnClick="@RealizarReserva">[Reservar]</ButtonProgress>
        }*@


    @*Popup de que realizo reserva, igual para cuando aplico beneficio?*@
    @*</EditForm>
            <SfDialog AllowDragging="true" @bind-Visible="@dialogVisible" IsModal="true" Width="285px" ShowCloseIcon="false" CssClass="reservaSuccessDialog">
                <DialogTemplates>
                    <Content>
                        <div class="reservaSuccessDialogContent">
                            <img src="/images/check.png" width="200" />
                            <h2>¡Tu Reserva ha sido realizada!</h2>
                            <p>Codigo de Reserva: <strong>@codigoReserva</strong></p>
                        </div>
                    </Content>
                    <FooterTemplate>
                        <div class="reservaSuccessDialogFooter">
                            <a href="/" title="Home">Ir al Home</a>
                        </div>

                    </FooterTemplate>
                </DialogTemplates>
                <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
            </SfDialog>

        }*@
</MyCard>
@code {

    //private ReservaACancelarDTO reservaACancelarDTO => this.ViewModel.ReservaACancelar;
    private NotificacionDeBeneficioViewModel ViewModel { get; set; }
    private BeneficioDTO Beneficio { get; set; }

    protected async override Task OnInitializedAsync()
    {
        this.ViewModel = await NotificacionDeBeneficioViewModel.Create(Beneficio, servBeneficio);
        await base.OnInitializedAsync();
    }

    public async Task Buscar()
    {
        await ViewModel.Buscar();
    }

    public async Task Borrar()
    {
        ViewModel.Beneficio.Id = 0;
    }

    //public void RowBound(RowDataBoundEventArgs<ReservaBasicDTO> args)
    //{
    //    if (!args.Data.ShowAsistidaNoAsistidaButton)
    //    {
    //        args.Row.AddClass(new string[] { "e-removecommand" });
    //    }
    //}
    //public async Task OnCommandClicked(CommandClickEventArgs<ReservaBasicDTO> args)
    //{
    //    BasicResultDTO result = null;
    //    if (args.CommandColumn.Title == "Asistida")
    //    {
    //        this.codigoReserva = args.RowData.Codigo;
    //        result = await this.ViewModel.ReservaAsistida(args.RowData);

    //    }
    //    else if (args.CommandColumn.Title == "Inasistida")
    //    {
    //        result = await this.ViewModel.ReservaNoAsistida(args.RowData);
    //    }
    //    if (result.IsValid)
    //    {
    //        Toast.ShowMessage(MessageType.Success, result.MessageSuccsefully);
    //        await OnInitializedAsync();
    //    }
    //    else
    //    {
    //        Toast.ShowMessage(MessageType.Error, result.AllErrors);
    //    }
    //}
    //private async Task CancelarReserva()
    //{
    //    loading = true;
    //    var result = await this.ViewModel.CancelarReserva();
    //    if (result.IsValid)
    //    {
    //        Toast.ShowMessage(MessageType.Success, result.MessageSuccsefully);
    //        this.dialogVisible = false;
    //        await OnInitializedAsync();
    //    }
    //    else
    //    {
    //        Toast.ShowMessage(MessageType.Error, result.AllErrors);
    //    }
    //    loading = false;
    //}
    //private void OcultarDialog(Object e)
    //{
    //    this.dialogVisible = false;
    //}
}
