@page "/AplicarBeneficio"
@attribute [Authorize]
@using Syncfusion.Blazor.Grids
@using AlDente.Contracts.Beneficios
@using AlDente.Globalization
@using Syncfusion.Blazor.DropDowns
@using Models.Beneficios



@inject IBeneficioService _beneficioService
@inject IToastService Toast
<MyCard Header="Beneficios">
    @if (this.Model == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="form-inline">
            <label class="sr-only" for="filter-name">Filtro</label>
            <input type="text" class="form-control mb-2 mr-sm-2"
                   @bind="Model.Codigo"
                   placeholder="Código Beneficio" />
            <button type="button" class="btn btn-primary mr-sm-2 mb-2"
                    @onclick="Buscar">
                Buscar
            </button>
            <button type="button" class="btn btn-danger mb-2"
                    @onclick="Borrar">
                Borrar
            </button>
        </div>
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <SfGrid DataSource="@Model.Beneficios" AllowPaging="true" AllowGrouping="true" AllowSorting="true">
                        <GridSortSettings>
                            <GridSortColumns>
                                <GridSortColumn Field="@nameof(BeneficioDTO.Fecha)" Direction="SortDirection.Descending"></GridSortColumn>
                            </GridSortColumns>
                        </GridSortSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(BeneficioDTO.Fecha) HeaderText="@Messages.Date"></GridColumn>
                            <GridColumn Field=@nameof(BeneficioDTO.Codigo) HeaderText="@Messages.Code"></GridColumn>
                            <GridColumn Field=@nameof(BeneficioDTO.Aplicado) HeaderText="Aplicado"></GridColumn>
                            <GridColumn Field=@nameof(BeneficioDTO.FechaPedidoDeAplicacion) HeaderText="Fecha Solicitud Codigo"></GridColumn>
                            <GridColumn Field=@nameof(BeneficioDTO.FechaExpiracion) HeaderText="Fecha de Expiracion"></GridColumn>
                            <GridColumn Field=@nameof(BeneficioDTO.Expiro) HeaderText="Expiro"></GridColumn>
                            <GridColumn Field=@nameof(BeneficioDTO.Descuento) HeaderText="Decuento"></GridColumn>
                            <GridColumn HeaderText="@Strings.Actions">
                                <GridCommandColumns>
                                    <GridCommandColumn Title="Aplicar" ButtonOption="@(new CommandButtonOptions() { IconCss = "fa fa-check-circle", CssClass = "e-info" })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                        <GridEvents CommandClicked="OnCommandClicked" RowDataBound="RowBound" TValue="BeneficioDTO">

                        </GridEvents>
                    </SfGrid>
                </div>
            </div>
        </div>
    }
</MyCard>
<style>
    .e-removecommand .e-unboundcell .e-unboundcelldiv button {
        display: none;
    }
</style>
@code {


    private AplicarBeneficioViewModel Model { get; set; }


    protected async override Task OnInitializedAsync()
    {
        this.Model = await AplicarBeneficioViewModel.Create(_beneficioService);
        await base.OnInitializedAsync();
    }

    public async Task Buscar()
    {
        await Model.Buscar();
    }

    public void RowBound(RowDataBoundEventArgs<BeneficioDTO> args)
    {
        if (!args.Data.PuedeAplicar)
        {
            args.Row.AddClass(new string[] { "e-removecommand" });
        }
    }

    public async Task OnCommandClicked(CommandClickEventArgs<BeneficioDTO> args)
    {
        if (args.CommandColumn.Title == "Aplicar")
        {
            await Aplicar(args.RowData);
        }
    }

    private async Task Aplicar(BeneficioDTO beneficioDTO)
    {
        var result = await Model.Aplicar(beneficioDTO.Id);
        if (result.IsValid)
        {
            Toast.ShowMessage(MessageType.Success, "El Beneficio fue Aplicado", $"El Beneficio fue aplicado correctamente - {beneficioDTO.Descuento}");
            await Buscar();
        }
        else
            Toast.ShowMessage(MessageType.Error, "El Beneficio No es valido para aplicar", result.AllErrors);
    }

    public void Borrar()
    {
        this.Model.Clear();
    }
}
