@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject IAuthenticationClientService AuthenticationService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment HostEnvironment
@inject AppState AppState
@inject IToastService toastService



<div class="col-md-6 offset-md-3 mt-5">

    @if (HostEnvironment.IsDevelopment())
    {
        <div class="alert alert-info">
            Email: test@gmail.com<br />
            Password: test
        </div>
    }

    <div class="card">
        <h4 class="card-header">Aldente Login</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <FluentValidationValidator @ref="fluentValidationValidator" DisableAssemblyScanning="@true" />
                <div class="form-group">
                    <DisplayName For="@(() => model.Email)" InputFor="@nameof(LoginViewModel.Email)" />
                    <InputText @bind-Value="model.Email" class="form-control" id="@nameof(LoginViewModel.Email)" />
                    <ValidationMessage For="@(() => model.Email)" />

                </div>
                <div class="form-group">
                    <DisplayName For="@(() => model.Password)" InputFor="@nameof(LoginViewModel.Password)" />
                    <InputText @bind-Value="model.Password" type="password" class="form-control" id="@nameof(LoginViewModel.Password)" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <ButtonWithSppiner loading="@loading" class="btn btn-primary">
                    @AlDente.Globalization.Strings.Login
                </ButtonWithSppiner>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private FluentValidationValidator fluentValidationValidator;
    private LoginViewModel model = new LoginViewModel();

    private bool loading;

    private string error;

    private string DisabledButton => loading ? "disabled" : "";
    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.Session.User != null)
        {
            NavigationManager.NavigateTo("");
        }
        else if (HostEnvironment.IsDevelopment())
        {
            this.model.Password = "test";
            this.model.Email = "test@gmail.com";
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.Login(model);
            AppState.TriggerRefreshAction();
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/";
            toastService.ShowMessage(MessageType.Success, Globalization.Strings.LoginSuccessTitle, Globalization.Strings.LoginSuccessContent);
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }


}