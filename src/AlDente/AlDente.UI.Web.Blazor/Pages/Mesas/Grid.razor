@page "/Mesas"
@attribute [Authorize]
@using Syncfusion.Blazor.Grids
@using AlDente.Contracts.Mesas
@using AlDente.Globalization

@inject IMesaService servMesa
@inject IToastService Toast
<MyCard Header="Mesas">
    @if (TodasLasMesas == null)
    {
        <p><em>Loading...</em></p>
    }
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid DataSource="@TodasLasMesas" Toolbar="@(new List<string>() { "Add", "Edit", "Delete" })" AllowPaging="true">
                    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog" NewRowPosition="NewRowPosition.Bottom" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true">
                        <Validator>
                            <FluentValidationValidator @ref="fluentValidationValidator" DisableAssemblyScanning="@true" />
                        </Validator>
                        <Template>
                            @{

                                var mesas = (context as MesaDTO);
                                <div class="form-group">
                                    <DisplayName For="@(()=>mesas.Capacidad)" InputFor="@nameof(MesaDTO.Capacidad)" />
                                    <InputNumber @bind-Value="mesas.Capacidad" class="form-control" id="@nameof(MesaDTO.Capacidad)" />
                                    <ValidationMessage For="@(() => mesas.Capacidad)" />
                                </div>
                                @if (!string.IsNullOrEmpty(error))
                                {
                                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                                }
                            }
                        </Template>
                    </GridEditSettings>
                    <GridEvents TValue="MesaDTO" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler"></GridEvents>
                    <GridColumns>
                        <GridColumn Field=@nameof(MesaDTO.Id) Width="140" IsPrimaryKey="true" Visible="false"></GridColumn>
                        <GridColumn Field=@nameof(MesaDTO.Capacidad) HeaderText="@Messages.Capacity"></GridColumn>
                        <GridColumn HeaderText="@Strings.Actions" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-primary" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-danger" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
</MyCard>

@code {
    public static List<MesaDTO> TodasLasMesas { get; set; }
    private FluentValidationValidator fluentValidationValidator;
    private string error;

    protected override async Task OnInitializedAsync()
    {

        TodasLasMesas = (await servMesa.GetAll()).ToList();
    }

    public async Task ActionBeginHandler(ActionEventArgs<MesaDTO> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if (args.Action == "Add")
                {
                    await servMesa.Create(args.Data);
                    Toast.ShowMessage(MessageType.Success, Messages.CreateSuccess, Messages.CreateSuccessMessage);
                }
                else
                {
                    await servMesa.Update(args.Data);
                    Toast.ShowMessage(MessageType.Success, Messages.UpdatedSuccess, Messages.UpdatedSuccessMessage);

                }
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                await servMesa.Delete(args.Data.Id);
                Toast.ShowMessage(MessageType.Success, Messages.DeleteSuccess, Messages.DeleteSuccessMessage);
            }
        }
        catch (Exception ex)
        {
            Toast.ShowMessage(MessageType.Error, Messages.Error, ex.Message);
            //error = ex.Message;
            args.Cancel = true;
            //StateHasChanged();
        }
    }
    public async Task ActionCompleteHandler(ActionEventArgs<MesaDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete)
            || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await OnInitializedAsync();
        }
    }
}
