@page "/Clientes"
@attribute [Authorize]
@*librerias*@
@using Syncfusion.Blazor.Grids
@using AlDente.Contracts.Clientes
@using AlDente.Globalization
@using Syncfusion.Blazor.DropDowns
@using AlDente.Contracts.Core

@inject IClienteService ClienteRestaurant
@inject IToastService Toast
<MyCard Header="Clientes">
    @if (TodosLosClientes == null)
    {
        <p><em>Loading...</em></p>
    }
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid DataSource="@TodosLosClientes" Toolbar="@(new List<string>() { "Add", "Edit", "Delete" })" AllowPaging="true">
                    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog" NewRowPosition="NewRowPosition.Bottom" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true">
                        <Validator>
                            <FluentValidationValidator @ref="fluentValidationValidator" DisableAssemblyScanning="@true" />
                        </Validator>
                        <Template>
                            @{
                                var cliente = (context as ClienteDTO);
                                <div class="form-group">
                                    <DisplayName For="@(()=>cliente.Email)" InputFor="@nameof(ClienteDTO.Email)" />
                                    <InputText @bind-Value="cliente.Email" class="form-control" id="@nameof(ClienteDTO.Email)" />
                                    <ValidationMessage For="@(() => cliente.Email)" />
                                </div>
                                <div class="form-group">
                                    <DisplayName For="@(()=>cliente.Nombre)" InputFor="@nameof(ClienteDTO.Nombre)" />
                                    <InputText @bind-Value="cliente.Nombre" class="form-control" id="@nameof(ClienteDTO.Nombre)" />
                                    <ValidationMessage For="@(() => cliente.Nombre)" />
                                </div>
                                <div class="form-group">
                                    <DisplayName For="@(()=>cliente.Apellido)" InputFor="@nameof(ClienteDTO.Apellido)" />
                                    <InputText @bind-Value="cliente.Apellido" class="form-control" id="@nameof(ClienteDTO.Apellido)" />
                                    <ValidationMessage For="@(() => cliente.Apellido)" />
                                </div>
                                <div class="form-group">
                                    <DisplayName For="@(()=>cliente.DNI)" InputFor="@nameof(ClienteDTO.DNI)" />
                                    <InputNumber @bind-Value="cliente.DNI" class="form-control" id="@nameof(ClienteDTO.DNI)" />
                                    <ValidationMessage For="@(() => cliente.DNI)" />
                                </div>
                                <div class="form-group">
                                    <DisplayName For="@(()=>cliente.Telefono)" InputFor="@nameof(ClienteDTO.Telefono)" />
                                    <InputText @bind-Value="cliente.Telefono" class="form-control" id="@nameof(ClienteDTO.Telefono)" />
                                    <ValidationMessage For="@(() => cliente.Telefono)" />
                                </div>


                                <div class="form-group">
                                    <DisplayName For="@(()=>cliente.Estado)" InputFor="@nameof(ClienteDTO.Estado)" />
                                    <SfDropDownList TItem="EstadoCliente" TValue="EstadosDeUnUsuario" PopupHeight="230px" Placeholder="[Seleccione Un Estado]" @bind-Value="@cliente.Estado" DataSource="@Estados">
                                        <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <ValidationMessage For="@(() => cliente.Estado)" />
                                </div>
                                @if (!string.IsNullOrEmpty(error))
                                {
                                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                                }
                            }
                        </Template>
                    </GridEditSettings>
                    <GridEvents TValue="ClienteDTO" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler"></GridEvents>
                    @*Agrega las columnas en la Grid*@
                    <GridColumns>
                        <GridColumn Field=@nameof(ClienteDTO.Id) Width="140" IsPrimaryKey="true" Visible="false"></GridColumn>
                        <GridColumn Field=@nameof(ClienteDTO.Email) HeaderText="@Messages.Email"></GridColumn>
                        <GridColumn Field=@nameof(ClienteDTO.Nombre) HeaderText="@Messages.Name"></GridColumn>
                        <GridColumn Field=@nameof(ClienteDTO.Apellido) HeaderText="@Messages.LastName"></GridColumn>
                        <GridColumn Field=@nameof(ClienteDTO.DNI) HeaderText="@Messages.DNI"></GridColumn>
                        <GridColumn Field=@nameof(ClienteDTO.Telefono) HeaderText="@Messages.Phone"></GridColumn>
                        <GridColumn HeaderText="@Strings.Actions" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-primary" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-danger" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
</MyCard>

@code {
    public static List<ClienteDTO> TodosLosClientes { get; set; }
    private FluentValidationValidator fluentValidationValidator;
    private string error;

    public class EstadoCliente
    {
        public EstadosDeUnUsuario Id { get; set; }
        public string Text { get; set; }
        public EstadoCliente(EstadosDeUnUsuario id, string text)
        {
            this.Id = id;
            this.Text = text;

        }
    }

    public static List<EstadoCliente> Estados { get; set; } = new List<EstadoCliente>
{
        new EstadoCliente(EstadosDeUnUsuario.Activo,Messages.Active),
        new EstadoCliente(EstadosDeUnUsuario.Inactivo,Messages.Inactive),
        new EstadoCliente(EstadosDeUnUsuario.Nuevo,Messages.New),
        new EstadoCliente(EstadosDeUnUsuario.Suspendido,Messages.Suspended)
    };

    protected override async Task OnInitializedAsync()
    {

        TodosLosClientes = (await ClienteRestaurant.GetAll()).ToList();
    }

    public async Task ActionBeginHandler(ActionEventArgs<ClienteDTO> args)
    {
        try
        {
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if (args.Action == "Add")
                {
                    await ClienteRestaurant.Create(args.Data);
                    Toast.ShowMessage(MessageType.Success, Messages.CreateSuccess, Messages.CreateSuccessMessage);
                }
                else
                {
                    await ClienteRestaurant.Update(args.Data);
                    Toast.ShowMessage(MessageType.Success, Messages.UpdatedSuccess, Messages.UpdatedSuccessMessage);
                }
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                await ClienteRestaurant.Delete(args.Data.Id);
                Toast.ShowMessage(MessageType.Success, Messages.Delete, Messages.DeleteSuccessMessage);
            }
        }
        catch (Exception ex)
        {
            Toast.ShowMessage(MessageType.Error, "Error", ex.Message);
            //error = ex.Message;
            args.Cancel = true;
            //StateHasChanged();
        }
    }
    public async Task ActionCompleteHandler(ActionEventArgs<ClienteDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete)
            || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await OnInitializedAsync();
        }
    }
}
