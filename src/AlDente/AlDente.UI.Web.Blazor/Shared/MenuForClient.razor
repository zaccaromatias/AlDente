<ul class="navbar-nav">
    <AuthorizeView Roles="Cliente">
        <li class="nav-item @GetActive("", NavLinkMatch.All)">
            <NavLink class="nav-link" href="/Reservar" Match="NavLinkMatch.All">@Globalization.Messages.Reservar</NavLink>
        </li>
        <li class="nav-item @GetActive("", NavLinkMatch.All)">
            <NavLink class="nav-link" href="/Menu" Match="NavLinkMatch.All">@Globalization.Messages.Menu</NavLink>
        </li>
        <li class="nav-item @GetActive("", NavLinkMatch.All)">
            <NavLink class="nav-link" href="/Opiniones" Match="NavLinkMatch.All">@Globalization.Messages.Opiniones</NavLink>
        </li>
        <li class="nav-item @GetActive("", NavLinkMatch.All)">
            <NavLink class="nav-link" href="/MisReservas" Match="NavLinkMatch.All">@Globalization.Messages.MisReservas</NavLink>
        </li>
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @context.User.Identity.Name
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                <a class="dropdown-item" href="/logout">@AlDente.Globalization.Strings.LogOut</a>
            </div>
        </li>
        <li class="nav-item">
            <a href="/TiposSancion" class="nav-link">[Tipos Sanción]</a>
        </li>
        <li class="nav-item">
            <a href="/TiposBeneficio" class="nav-link">[Tipos Beneficio]</a>
        </li>
        <li class="nav-item">
            <a href="/PoliticasBeneficio" class="nav-link">[Políticas Beneficio]</a>
        </li>
        <li class="nav-item">
            <a href="/PoliticasSancion" class="nav-link">[Políticas Sanción]</a>
        </li>-

    </AuthorizeView>

</ul>
@code{

    [Parameter]
    public AuthenticationState context { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized() => NavigationManager.LocationChanged += (s, e) => StateHasChanged();

    bool IsActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
        return navLinkMatch == NavLinkMatch.All ? relativePath == href.ToLower() : relativePath.StartsWith(href.ToLower());
    }

    string GetActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix) => IsActive(href, navLinkMatch) ? "active" : "";
}
